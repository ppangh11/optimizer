#최적화 방법 및 실습
#grid search

# objective function 
obj.ftn = function(x){
  fx = exp(-x)+x^2
  return(fx)
}

# x=1  -> f(x) 의 계산
obj.ftn(x=1); obj.ftn(1)
x.vec <- seq(-5,5,by=1)

k <- length(x.vec)
y.vec <- rep(NA, k)
for(i in 1:k){
  y.vec[i] <- obj.ftn(x.vec[i])
}

obj.ftn(x.vec)

# plot
par(mfrow=c(1,3))
curve(obj.ftn(x), xlim=c(-5,5))
plot(x.vec, obj.ftn(x.vec))
plot(x.vec, obj.ftn(x.vec), type="l")

# grid search
a <- -3; b <- 3; eps <- 1e-1  
m <- round((b-a)/eps)         
x.vec <- seq(a,b,length.out=(m+1))
y.vec <- obj.ftn(x.vec)
opt <- which.min(y.vec);  x.grid <- x.vec[opt]

dev.off()
curve(obj.ftn(x), xlim=c(-5,5))
abline(v=c(a,b), col="blue", lty=1)
abline(v=x.vec, col="blue", lty=2)

title(paste("minimizer","=",x.grid))

# iterative search
a <- -3; b <- 3; eps <- 1e-5
m <- 5
iter.max <- 100
for(i in 1:iter.max){
  x.vec <- seq(a,b,length.out=(m+1))
  opt <- which.min(obj.ftn(x.vec))
  x.iter <- x.vec[opt]
  a <- x.vec[max(1,opt-1)]; b <- x.vec[min(m+1,opt+1)]
  if(b-a<eps) break
}

dev.off()
curve(obj.ftn(x), xlim=c(-5,5))
abline(v=x.iter, col="purple")
title(paste("minimizer","=",x.iter))

# iterative search - trace
a <- -3; b <- 3; eps <- 1e-5
m <- 5
iter.max <- 100
x.trace <- c()
for(i in 1:iter.max){
  x.vec <- seq(a,b,length.out=(m+1))
  opt <- which.min(obj.ftn(x.vec))
  x.trace <- c(x.trace,x.vec[opt])
  a <- x.vec[max(1,opt-1)]; b <- x.vec[min(m+1,opt+1)]
  if(b-a<eps) break
}
x.trace; tail(x.trace,1)

# comparison
dev.off()
curve(obj.ftn(x), xlim=c(-5,5))
abline(v=c(x.grid, x.iter), col=c("red", "purple"))
title(paste("minimizer : ","grid","=",x.grid,"iterative","=",x.iter))
